// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: account_service.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountService_Account_FullMethodName             = "/AccountService/Account"
	AccountService_SaveDepartment_FullMethodName      = "/AccountService/SaveDepartment"
	AccountService_ListDepartment_FullMethodName      = "/AccountService/ListDepartment"
	AccountService_ReadDepartment_FullMethodName      = "/AccountService/ReadDepartment"
	AccountService_AuthList_FullMethodName            = "/AccountService/AuthList"
	AccountService_MenuList_FullMethodName            = "/AccountService/MenuList"
	AccountService_AuthApply_FullMethodName           = "/AccountService/AuthApply"
	AccountService_AuthNodesByMemberId_FullMethodName = "/AccountService/AuthNodesByMemberId"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	Account(ctx context.Context, in *AccountReqMessage, opts ...grpc.CallOption) (*AccountResponse, error)
	SaveDepartment(ctx context.Context, in *DepartmentReqMessage, opts ...grpc.CallOption) (*DepartmentMessage, error)
	ListDepartment(ctx context.Context, in *DepartmentReqMessage, opts ...grpc.CallOption) (*ListDepartmentMessage, error)
	ReadDepartment(ctx context.Context, in *DepartmentReqMessage, opts ...grpc.CallOption) (*DepartmentMessage, error)
	AuthList(ctx context.Context, in *AuthReqMessage, opts ...grpc.CallOption) (*ListAuthMessage, error)
	MenuList(ctx context.Context, in *MenuReqMessage, opts ...grpc.CallOption) (*MenuResponseMessage, error)
	AuthApply(ctx context.Context, in *AuthReqMessage, opts ...grpc.CallOption) (*ApplyResponse, error)
	AuthNodesByMemberId(ctx context.Context, in *AuthReqMessage, opts ...grpc.CallOption) (*AuthNodesResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) Account(ctx context.Context, in *AccountReqMessage, opts ...grpc.CallOption) (*AccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, AccountService_Account_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SaveDepartment(ctx context.Context, in *DepartmentReqMessage, opts ...grpc.CallOption) (*DepartmentMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentMessage)
	err := c.cc.Invoke(ctx, AccountService_SaveDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ListDepartment(ctx context.Context, in *DepartmentReqMessage, opts ...grpc.CallOption) (*ListDepartmentMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepartmentMessage)
	err := c.cc.Invoke(ctx, AccountService_ListDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ReadDepartment(ctx context.Context, in *DepartmentReqMessage, opts ...grpc.CallOption) (*DepartmentMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentMessage)
	err := c.cc.Invoke(ctx, AccountService_ReadDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AuthList(ctx context.Context, in *AuthReqMessage, opts ...grpc.CallOption) (*ListAuthMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthMessage)
	err := c.cc.Invoke(ctx, AccountService_AuthList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) MenuList(ctx context.Context, in *MenuReqMessage, opts ...grpc.CallOption) (*MenuResponseMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuResponseMessage)
	err := c.cc.Invoke(ctx, AccountService_MenuList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AuthApply(ctx context.Context, in *AuthReqMessage, opts ...grpc.CallOption) (*ApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, AccountService_AuthApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AuthNodesByMemberId(ctx context.Context, in *AuthReqMessage, opts ...grpc.CallOption) (*AuthNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthNodesResponse)
	err := c.cc.Invoke(ctx, AccountService_AuthNodesByMemberId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility.
type AccountServiceServer interface {
	Account(context.Context, *AccountReqMessage) (*AccountResponse, error)
	SaveDepartment(context.Context, *DepartmentReqMessage) (*DepartmentMessage, error)
	ListDepartment(context.Context, *DepartmentReqMessage) (*ListDepartmentMessage, error)
	ReadDepartment(context.Context, *DepartmentReqMessage) (*DepartmentMessage, error)
	AuthList(context.Context, *AuthReqMessage) (*ListAuthMessage, error)
	MenuList(context.Context, *MenuReqMessage) (*MenuResponseMessage, error)
	AuthApply(context.Context, *AuthReqMessage) (*ApplyResponse, error)
	AuthNodesByMemberId(context.Context, *AuthReqMessage) (*AuthNodesResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServiceServer struct{}

func (UnimplementedAccountServiceServer) Account(context.Context, *AccountReqMessage) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (UnimplementedAccountServiceServer) SaveDepartment(context.Context, *DepartmentReqMessage) (*DepartmentMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDepartment not implemented")
}
func (UnimplementedAccountServiceServer) ListDepartment(context.Context, *DepartmentReqMessage) (*ListDepartmentMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartment not implemented")
}
func (UnimplementedAccountServiceServer) ReadDepartment(context.Context, *DepartmentReqMessage) (*DepartmentMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDepartment not implemented")
}
func (UnimplementedAccountServiceServer) AuthList(context.Context, *AuthReqMessage) (*ListAuthMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthList not implemented")
}
func (UnimplementedAccountServiceServer) MenuList(context.Context, *MenuReqMessage) (*MenuResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}
func (UnimplementedAccountServiceServer) AuthApply(context.Context, *AuthReqMessage) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthApply not implemented")
}
func (UnimplementedAccountServiceServer) AuthNodesByMemberId(context.Context, *AuthReqMessage) (*AuthNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthNodesByMemberId not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}
func (UnimplementedAccountServiceServer) testEmbeddedByValue()                        {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_Account_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Account(ctx, req.(*AccountReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SaveDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SaveDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_SaveDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SaveDepartment(ctx, req.(*DepartmentReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ListDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ListDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ListDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ListDepartment(ctx, req.(*DepartmentReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ReadDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ReadDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ReadDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ReadDepartment(ctx, req.(*DepartmentReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AuthList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AuthList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AuthList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AuthList(ctx, req.(*AuthReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_MenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).MenuList(ctx, req.(*MenuReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AuthApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AuthApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AuthApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AuthApply(ctx, req.(*AuthReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AuthNodesByMemberId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReqMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AuthNodesByMemberId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AuthNodesByMemberId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AuthNodesByMemberId(ctx, req.(*AuthReqMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Account",
			Handler:    _AccountService_Account_Handler,
		},
		{
			MethodName: "SaveDepartment",
			Handler:    _AccountService_SaveDepartment_Handler,
		},
		{
			MethodName: "ListDepartment",
			Handler:    _AccountService_ListDepartment_Handler,
		},
		{
			MethodName: "ReadDepartment",
			Handler:    _AccountService_ReadDepartment_Handler,
		},
		{
			MethodName: "AuthList",
			Handler:    _AccountService_AuthList_Handler,
		},
		{
			MethodName: "MenuList",
			Handler:    _AccountService_MenuList_Handler,
		},
		{
			MethodName: "AuthApply",
			Handler:    _AccountService_AuthApply_Handler,
		},
		{
			MethodName: "AuthNodesByMemberId",
			Handler:    _AccountService_AuthNodesByMemberId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account_service.proto",
}
